<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	
	<!-- *** 스프링 시큐리티 적용 3. 
		** JDBC적용 1 : 스프링 시큐리티에서 지정된 테이블 형식으로 적용하기
		** 1) 준비
		=> root~~~.xml 에 dataSource 빈등록
		=> table 생성 ( users, authorities )
	-->
	<s:http use-expressions="true">
		<!-- ** 로그인과 resources 는 접근 허용 (안해주면 ~.js 화일 인식안됨)  -->
		<s:intercept-url pattern="/login*" access="permitAll" />
		<s:intercept-url pattern="/resources/**" access="permitAll" />
	
		<s:intercept-url pattern="/m*" 
		                   access="hasAuthority('ROLE_ADMIN')" />
		<s:intercept-url pattern="/b*" 
		                   access="hasRole('ROLE_USER')" />
		<s:intercept-url pattern="/c*" access="isAuthenticated()" />
		<s:intercept-url pattern="/**" access="permitAll"/>
		
		<s:access-denied-handler error-page="/accessError"/>
		<s:form-login login-page="/ssLoginf"
					authentication-success-handler-ref="loginSuccess" />
		<s:logout logout-url="/ssLogout" 
				  invalidate-session="true" 
				  delete-cookies="JSESSIONID" />
	</s:http>
	
	<bean id="loginSuccess" 
		class="securityTest.LoginSuccessHandler" lazy-init="true"/>
	
	<!--** 2) 인증/권한 설정
		=> JDBC를 이용한 인증/권한 -> 스프링 시큐리티에서 지정된 형식
	
		* Authentication-Manager
		=> 인증과 권한 처리
		
		* Provider
		=> 인증이나 권한 정보를 제공하는 존재
		=> 이를 위해 <s:user-service.. Tag 대신 
			-> UserDetailsService (i) 구현클래스 사용
			-> <s:jdbc-user-service Tag 로 "dataSource" 등록
			   ( 설정전에 "dataSource" 를 root~~.xml 에 빈등록 해야함 )
		-->
	<s:authentication-manager>
		<s:authentication-provider>
			<s:jdbc-user-service data-source-ref="dataSource"/>
			<s:password-encoder ref="bcryptPasswordEncoder"/>
		</s:authentication-provider>
	</s:authentication-manager>
	
</beans>
