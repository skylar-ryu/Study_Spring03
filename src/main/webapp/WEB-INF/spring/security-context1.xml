<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- *** 스프링 시큐리티 적용 1. 
		=> root~~~ 에 설정 해야함. 
		  ( 그러나 스프링 시큐리티는 단독 설정이 가능하기 때문에 
		    root-context.xml 과는 별도로 작성 하는것을 권장함 )
		=> DispatcherServlet 이전에 처리되기 때문, 그리고
		   스프링 시큐리티가 제공하는 JSP용 JSTL 라이브러리가 정상 작동되도록 하기위함.  
		
		1. Namespaces security 추가 및 설정
		=> 04행: security 대신 짧게 s 로 설정함  
		
		2. http 설정
		=> FilterSecurityInterceptor 필터 생성	
		   ( 스프링 시큐리티 설정의 핵심적인 대부분의 설정을 처리함. )	
		=> use-expressions="true"
			: intercept-url 의 access 속성에서 스프링시큐리티가 제공하는
			  SpEL(스프링 표현식)의 사용을 허용 
			  이를 이용하면 접근IP제한 등 보다더 다양한 접근제한 설정이 가능함.  
		   use-expressions="false"
		   	: 단순 문자열만 이용가능 (기본값 false, 그러므로 반드시 true 설정을 해야 SpEL 사용가능) 	
		=> auto-config='true' : 기본 로그인페이지, HTTP 기본인증, 로그아웃 기능등을 제공
		
		** intercept-url
		=> 접근 권한 설정, 작성된 순서대로 적용됨. (한번 적용되면 뒤 건에 일치해도 적용되지않음) 
		=> pattern : 접근경로를 Ant 패턴으로 설정	  
		=> access : 해당 경로 패턴에 누가 접근 가능한지를 설정
		
		* Ant 패턴
		=> Ant는 자바 기반의 빌드 도구로서 ?, *, ** 을 이용하여 경로 패턴을 명시하고 있으며,
		   BeanNameUrlHandlerMapping과 SimpleUrlHandlerMapping은 Ant 경로패턴을
		   이용하여 요청 URL과 컨트롤러의 매핑을 처리하고 있다.
			-> ?  : 1개의 문자와 매칭
			-> *  : 0개 이상의 문자와 매칭
			-> ** : 0개 이상의 디렉터리(폴더)와 매칭
			
		** form-login
		=> 인증된 사용자만 허용되는 자원경로에 접근할때 로그인폼을 보여준다.
		   로그인폼에서 id 와 password 를 전송하면, 로그인 인증 처리를 한다.
		   
		** form-logout      
		=> 로그아웃 처리
	-->
	
	<s:http use-expressions="true" auto-config="true">
		<!-- ** url 패턴과 그에 대한 권한 설정 
		     => 로그인과 resources 는 접근 허용 (안해주면 ~.js 화일 인식안됨)  
		     => url 패턴별 권한 설정 (Ajax 요청은 추후에 ....)-->
		<s:intercept-url pattern="/login*" access="permitAll" />
		<s:intercept-url pattern="/resources/**" access="permitAll" />

		<s:intercept-url pattern="/member/*" 
						 access="hasAuthority('ROLE_ADMIN')" />
		<!-- access의 Value (SpEL_스프링 표현식)
			=> hasAuthority(''), hasRole('') 는 동일의미
			   "/**/ax*" : ax 로 시작하는 경로는 'ROLE_ADMIN' 권한을 가진 사용자만 접근가능
			=> isAuthenticated() : 인증된 사용자만 접근가능	  
			=> permitAll : 누구나 접근가능
		-->				 
		<s:intercept-url pattern="/?check*"
						 access="hasRole('ROLE_USER')" />
		<s:intercept-url pattern="/?cp*"
						 access="isAuthenticated()" />	
		<s:intercept-url pattern="/**"
						 access="permitAll" />	
		<!-- Test2. 403 오류 화면 변경  
		  => error-page="/accessError"
			 요청명 등록하고, 매핑메서드 작성 ( HomeController ) -->   				 
		<s:access-denied-handler error-page="/accessError" />  	
	</s:http>
	
	<!-- 3. User 정보 (인증과 권한 정보) 
		** 스프링 시큐리티에서 용어사용의 주의사항
			=> userid 를 username 으로 표현.
			=> user는 일반적 사용자의 개념이 아니고 인증정보와 권한을 가진 객체를 의미함.  
			
		** Test1. 아래 User 설정 후 Test	
		  => 로그인 없이 권한별 요청 실행 
		  => 인증 이 필요한 요청은 로그인폼으로 자동 넘어가게 됨.
		     이때 로그인폼은 스프링시큐리티 기본 제공하는 폼
			-> 로그인 : DB값이 아닌 아래 설정시 정의한 값으로 로그인
			-> banana 12345!, admin 12345! 비교   
		  => 권한에 해당하면 실행되고, 로그인 했으나 권한밖이면 403 오류 발생.
			-> 주의사항은 크롬의 cash 삭제를 하면서 해야 정확한 Test 가 가능함
			   ( 이전에 보관된 값 때문에 인증된것으로 취급될 수 있음 ) 
			-> 403 오류 화면 변경가능 : Test2.
				   
		  => 단, Spring 버전 4 까지는 PasswordEncoder 처리 없이도 실행되지만,
			    Spring 버전 5 부터는 PasswordEncoder 지정을 반드시 해야함.
				( 만약 PasswordEncoder 지정없이 하려면 패스워드 앞에 '{noop}' 를 붙여준다.
				      password="{noop}1234" )
	-->
	<s:authentication-manager>
		<s:authentication-provider>
			<s:user-service>
				<s:user name="admin" password="{noop}1111!"  
						authorities="ROLE_ADMIN,ROLE_USER"/>	
				<!-- authorities: 사용자의 권한목록 지정, 
								  위의 intercept-url access속성에서 사용
								  즉, 아래 admin 은 "/member/*", "/?check*" 에 해당하는 모든경로 접근가능 -->
				<s:user name="banana" password="{noop}2222!" 
				     	authorities="ROLE_USER"/>	
			</s:user-service>
		</s:authentication-provider>
	</s:authentication-manager>
	
</beans>
